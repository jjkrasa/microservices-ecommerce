services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.8
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      eshop-network:

  kafka:
    image: confluentinc/cp-kafka:7.5.8
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      eshop-network:
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 10

  eureka-server:
    build:
      context: .
      dockerfile: eureka-server/Dockerfile
    container_name: ${EUREKA_SERVER_CONTAINER_NAME}
    restart: unless-stopped
    networks:
      eshop-network:
        aliases:
          - ${EUREKA_SERVER_HOST}
    ports:
      - "${EUREKA_SERVER_PORT:-8761}:8761"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${EUREKA_SERVER_PORT}/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10


# Databases
  postgres-auth:
    image: postgres:16
    container_name: ${POSTGRES_AUTH_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_AUTH_DB}
      POSTGRES_USER: ${POSTGRES_AUTH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_AUTH_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_AUTH_USER} -d ${POSTGRES_AUTH_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      eshop-network:
        aliases:
          - ${POSTGRES_AUTH_HOST}

  postgres-product:
    image: postgres:16
    container_name: ${POSTGRES_PRODUCT_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_PRODUCT_DB}
      POSTGRES_USER: ${POSTGRES_PRODUCT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PRODUCT_PASSWORD}
    volumes:
      - postgres-product-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PRODUCT_PORT:-5434}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_PRODUCT_USER} -d ${POSTGRES_PRODUCT_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      eshop-network:
        aliases:
          - ${POSTGRES_PRODUCT_HOST}

  postgres-cart:
    image: postgres:16
    container_name: ${POSTGRES_CART_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_CART_DB}
      POSTGRES_USER: ${POSTGRES_CART_USER}
      POSTGRES_PASSWORD: ${POSTGRES_CART_PASSWORD}
    volumes:
      - postgres-cart-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_CART_PORT:-5435}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_CART_USER} -d ${POSTGRES_CART_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      eshop-network:
        aliases:
          - ${POSTGRES_CART_HOST}

  postgres-order:
    image: postgres:16
    container_name: ${POSTGRES_ORDER_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_ORDER_DB}
      POSTGRES_USER: ${POSTGRES_ORDER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ORDER_PASSWORD}
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_ORDER_PORT:-5436}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_ORDER_USER} -d ${POSTGRES_ORDER_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      eshop-network:
        aliases:
          - ${POSTGRES_ORDER_HOST}

  postgres-stock:
    image: postgres:16
    container_name: ${POSTGRES_STOCK_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_STOCK_DB}
      POSTGRES_USER: ${POSTGRES_STOCK_USER}
      POSTGRES_PASSWORD: ${POSTGRES_STOCK_PASSWORD}
    volumes:
      - postgres-stock-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_STOCK_PORT:-5437}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_STOCK_USER} -d ${POSTGRES_STOCK_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      eshop-network:
        aliases:
          - ${POSTGRES_STOCK_HOST}

# Services
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: ${API_GATEWAY_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      EUREKA_SERVER_URL: "http://${EUREKA_SERVER_HOST}:${EUREKA_SERVER_PORT}/eureka"
      API_GATEWAY_HOST: ${API_GATEWAY_HOST}
      AUTH_APP_NAME: ${AUTH_APP_NAME}
      PRODUCT_APP_NAME: ${PRODUCT_APP_NAME}
      CART_APP_NAME: ${CART_APP_NAME}
      ORDER_APP_NAME: ${ORDER_APP_NAME}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    networks:
      - eshop-network
    depends_on:
      eureka-server:
        condition: service_healthy

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    restart: unless-stopped
    environment:
      EUREKA_SERVER_URL: "http://${EUREKA_SERVER_HOST}:${EUREKA_SERVER_PORT}/eureka"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://${POSTGRES_AUTH_HOST}:5432/${POSTGRES_AUTH_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_AUTH_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      APPLICATION_SECURITY_JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      APPLICATION_SECURITY_JWT_EXPIRATION: ${JWT_EXPIRATION}
      AUTH_APP_NAME: ${AUTH_APP_NAME}
    networks:
      - eshop-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      postgres-auth:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    container_name: product-service
    restart: unless-stopped
    environment:
      EUREKA_SERVER_URL: "http://${EUREKA_SERVER_HOST}:${EUREKA_SERVER_PORT}/eureka"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://${POSTGRES_PRODUCT_HOST}:5432/${POSTGRES_PRODUCT_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_PRODUCT_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PRODUCT_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      PRODUCT_APP_NAME: ${PRODUCT_APP_NAME}
    volumes:
      - product-images:/app/uploads
    networks:
      - eshop-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      postgres-product:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      stock-service:
        condition: service_healthy

  cart-service:
    build:
      context: .
      dockerfile: cart-service/Dockerfile
    container_name: cart-service
    restart: unless-stopped
    environment:
      EUREKA_SERVER_URL: "http://${EUREKA_SERVER_HOST}:${EUREKA_SERVER_PORT}/eureka"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://${POSTGRES_CART_HOST}:5432/${POSTGRES_CART_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_CART_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_CART_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      CART_APP_NAME: ${CART_APP_NAME}
    networks:
      - eshop-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      postgres-cart:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      product-service:
        condition: service_healthy

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    container_name: order-service
    restart: unless-stopped
    environment:
      EUREKA_SERVER_URL: "http://${EUREKA_SERVER_HOST}:${EUREKA_SERVER_PORT}/eureka"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://${POSTGRES_ORDER_HOST}:5432/${POSTGRES_ORDER_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_ORDER_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_ORDER_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      ORDER_APP_NAME: ${ORDER_APP_NAME}
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
    networks:
      - eshop-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      postgres-order:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      kafka:
        condition: service_healthy

  stock-service:
    build:
      context: .
      dockerfile: stock-service/Dockerfile
    container_name: stock-service
    restart: unless-stopped
    environment:
      EUREKA_SERVER_URL: "http://${EUREKA_SERVER_HOST}:${EUREKA_SERVER_PORT}/eureka"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://${POSTGRES_STOCK_HOST}:5432/${POSTGRES_STOCK_DB}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_STOCK_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_STOCK_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      STOCK_APP_NAME: ${STOCK_APP_NAME}
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
    networks:
      - eshop-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      postgres-stock:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    container_name: ${NOTIFICATION_SERVICE_CONTAINER_NAME}
    restart: unless-stopped
    environment:
      NOTIFICATION_SERVICE_APP_NAME: ${NOTIFICATION_SERVICE_APP_NAME}
      KAFKA_SERVER: ${KAFKA_HOST}:${KAFKA_PORT}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM: ${MAIL_FROM}
    networks:
      - eshop-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy


# Monitoring
  prometheus:
    image: prom/prometheus:v2.53.5
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    depends_on:
      - auth-service
      - product-service
      - cart-service
      - order-service
      - stock-service
      - notification-service
    networks:
      - eshop-network

  grafana:
    image: grafana/grafana:12.0.4
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - eshop-network

# Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - eshop-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - eshop-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.14.3
    container_name: logstash
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      - elasticsearch
    networks:
      - eshop-network


volumes:
  postgres-auth-data: {}
  postgres-product-data: {}
  postgres-cart-data: {}
  postgres-order-data: {}
  postgres-stock-data: {}
  product-images: {}
  es_data: {}

networks:
  eshop-network:
    driver: bridge